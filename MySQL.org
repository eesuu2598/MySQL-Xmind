* 数据库基本操作
	+ 创建数据库
		+	CREATE DATABASE <sqlName>;
		+ CREATE DATABASES <sqlName> CREATE SET <code>;  创建数据库并设置编码
		+ CREATE DATABASE IF NOT EXISTS <sqlName>;   创建数据，如果数据库没有被创建
	+ 查看数据库
		+ SHOW DATABASES;
	+ 修改数据库
		+ ALTER DATABASE <sqlName> CHARACTER SET <newCode>;
	+ 删除数据库
		+ DROP DATABASE <sqlName>;
		注意：数据库一旦删除，则数据库中的表和数据都会被一同删除
	+ 查看当前使用的数据库
		+ SELECT DATABASE();   ()函数执行符
	+ 使用数据库
		+ USE <sqlName>;
* 表的基本操作
** 基本概念
		+ 数据库和表的关系
			每个数据库包含N张表，及表是在库中
		+ 表(二维表)
			+ 行和列组成：可以将复杂的数据保存在简单的表中
			+ 表中的每一行就是一条完整的记录
			+ 表中的列用于保存每条记录中特定的信息
** 创建表
	+ 使用sql语句创建
		+ CREATE TABLE <sqlName>(
			字段名1 字段类型1 [完整性约束]，
			字段名1 字段类型1 [完整性约束]，
			......
			字段名1 字段类型1 [完整性约束]
		)
		注意：
			+ 表名不能使用关键字 例如：DATABASE、SELECT、WHERE
			+ 每组字段名 字段类型之间使用 逗号(英文逗号) 隔开，最后一个不需要逗号
** 查看表
	+ 查看表结构
		+ DESC <tableName>;
	+ 查看表的详细结构(还可以查看存储引擎和字符集)
		+ SHOW CREATE TABLE <tableName>;
** 修改表结构
	+ 修改表名
		+ ALTER TABLE <old_table_name> rename <new_table_name>;
	+ 修改字段数据类型
		+ ALTER TEBLE <tableName> MODIFY <colName> 新字段类型;
		例如：将t_student表中id的数据类型 修改为int(10)
	+ 修改多个字段的数据类型
		+ ALTER TABLE <tableName> MODIFY <colName1> 新字段类型1，
															MODIFY <colName2> 新字段类型2，
															......
															MODIFY <colNamen> 新字段类型n;
	+ 修改字段名
		+ ALTER TABLE <tableName> CHANGE 旧字段名 新字段类型 旧字段类型
		例如：将t_student 表中 gender 修改为sex
	+ 修改字段名并修改字段类型
		+ ALTER TABLE <tableName> CHAGE 旧字段名 新字段名 新字段类型
	+ 添加字段
		+ ALTER TABLE <tableName> add 字段名 字段类型 [完整性约束] [first | after 字段名1]
			+ 在t_student 表末尾添加score字段
			+ 在t_student 表第一个位置添加phone字段
			+ 在t_student 变中age的后面添加clazz字段
	+ 删除字段
		+ ALTER TABLE <tableName> DROP <colName>
			+ 删除表t_student 中phone字段
** 删除表t_student
	+ 使用SQL语句
		+ DROP TABLE <tableName>
